#!/bin/bash


# Check whether credentials are set

: "${INSTANCE_NAME:?"You must set the name of your ec2 instance, e.g. datascience_mattupson"}"

WARN=⚠️
BOOM=💥
ZAP=⚡
STRONG=💪
SHRUG=🤷
WAIT=⏳
DONE=✔️

GREEN="\e[0;32m" 
BLUE="\e[0;34m" 
RED="\e[0;31m" 
WHITE="\e[0m"

function remote {

    if [[ "$2" == '-v' ]] || [[ "$2" == '--verbose' ]]; then

	VERBOSE=1

    fi

    #
    # Start a stopped instance
    #

    if [[ "$1" == 'start' ]]; then

        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
        "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
        jq -r ".Reservations[] | .Instances[] | .InstanceId")

        echo -e "$ZAP Sending start signal to instance $BLUE$INSTANCE_NAME$WHITE"

        INSTANCE_IP=$(aws ec2 describe-instances --filters \
        "Name=tag:Name,Values=$INSTANCE_NAME" \
        "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
        jq -r '.Reservations[] | .Instances[] | .NetworkInterfaces[] | .Association.PublicDnsName')

        aws ec2 start-instances --instance-ids $INSTANCE_ID && \
            echo -e "$STRONG $GREEN Instance $BLUE$INSTANCE_NAME$GREEN started$WHITE"

    #
    # Create an ec2 remote in your local repo
    #

    elif [[ "$1" == 'git' ]]; then

        : "${REMOTE_PATH:?"You must set the path to the remote working repo."}"
        : "${LOCAL_PATH:?"You must set the path to the local working repo."}"

        INSTANCE_IP=$(aws ec2 describe-instances --filters \
        "Name=tag:Name,Values=$INSTANCE_NAME" \
        "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
        jq -r '.Reservations[] | .Instances[] | .NetworkInterfaces[] | .Association.PublicDnsName')

        if [[ "$INSTANCE_IP" = null ]]; then

            echo -e "$WARN $RED The instance must be running before you run:" && \
            echo -e "    remote git" && \
            exit 1

        fi
        
        echo -e "$GREEN Trying to create a remote named ec2 in your local"
        echo " $LOCAL_PATH repo."

        # Remove the remote if it exists

        (cd $LOCAL_PATH && git remote remove ec2 > /dev/null 2>&1 || true )
        (cd $LOCAL_PATH && git remote add ec2 ubuntu@$INSTANCE_IP:$REMOTE_PATH) &&
            echo -e "$GREEN ...done$WHITE"; \
            echo ""; \
            echo " You may now push to the remote datalabs repo with:"; \
            echo "     git push ec2"


    #
    # Connect to started instance
    #
    
    elif [[ "$1" == 'connect' ]]; then

        INSTANCE_IP=$(aws ec2 describe-instances --filters \
        "Name=tag:Name,Values=$INSTANCE_NAME" \
        "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
        jq -r '.Reservations[] | .Instances[] | .NetworkInterfaces[] | .Association.PublicDnsName')

        n=0
        until [ $n -ge 5 ]
        do


	        if [[ $VERBOSE ]]; then
                ssh -v ubuntu@$INSTANCE_IP && break || \
                    echo -e "$WARN $RED Connection failed, trying again $[5-$n] times.$WHITE" 
	        else
                ssh ubuntu@$INSTANCE_IP && break || \
                    echo -e "$WARN $RED Connection failed, trying again $[5-$n] times.$WHITE" 
	        fi
            n=$[$n+1]
            if [[ "$n" = 5 ]]; then 
                echo -e "$WARN $RED Could not connect to instance $BLUE$INSTANCE_NAME$WHITE."
                echo -e "$RED Check instance status before trying again."
            fi
            sleep 10
        done

    #
    # Return the instance ID
    #

    elif [[ "$1" == 'id' ]]; then

        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
          "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
          jq -r ".Reservations[] | .Instances[] | .InstanceId")

	    if [[ $VERBOSE ]]; then
                echo -e "$DONE  $BLUE$INSTANCE_NAME$WHITE instance id: $BLUE$INSTANCE_ID$WHITE"
	    else
            	echo -e "$INSTANCE_ID"
	    fi

    #
    # Return the instance IP
    #

    elif [[ "$1" == 'ip' ]]; then

        INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
          "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
          jq -r ".Reservations[] | .Instances[] | .PublicDnsName")

	    if [[ $VERBOSE ]]; then
            	echo -e "$DONE  $BLUE$INSTANCE_NAME$WHITE instance ip: $BLUE$INSTANCE_IP$WHITE"
	    else
            	echo -e "$INSTANCE_IP"
	    fi

    #
    # Get the instance status
    #
    
    elif [[ "$1" == 'status' ]]; then

        echo -e "$WAIT Getting status of instance $BLUE$INSTANCE_NAME$WHITE"

        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
          "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
          jq -r ".Reservations[] | .Instances[] | .InstanceId")

        aws ec2 describe-instance-status --instance-ids $INSTANCE_ID \
            --output table \
            --query 'InstanceStatuses[].{InstanceId:InstanceId, AvailabilityZone:AvailabilityZone,InstanceStatus:InstanceStatus.Status,SystemStatus:SystemStatus.Status}'

    #
    # List all datalabs instances
    #

    elif [[ "$1" =~ 'list' ]] || [[ "$1" =~ 'ls' ]]; then

        : "${FILTER_PREFIX:?"You must set a prefix by which to filter instances."}"

        echo -e "$WAIT Getting list of all instances that match $FILTER_PREFIX"

        aws ec2 describe-instances --output table \
        --filters "Name=tag:Name,Values=*$FILTER_PREFIX*" \
        "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" \
        --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`]|[0].Value, Instance:InstanceId,State:State.Name,InstanceType:InstanceType}'

    #
    # Change the instance type
    #

    elif [[ "$1" == 'type' ]]; then


        if [[ -z "$2" ]]; then

            INSTANCE_TYPE=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
              "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
              jq -r ".Reservations[] | .Instances[] | .InstanceType")


            echo -e "$DONE  $BLUE$INSTANCE_NAME$WHITE instance type: $BLUE$INSTANCE_TYPE$WHITE"
            echo ""
            echo "To change instance specify a type, e.g.:"
            echo "    remote type t2.small"

        else 

            CURR_INSTANCE_TYPE=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
              "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
              jq -r ".Reservations[] | .Instances[] | .InstanceType")

            if [[ "$CURR_INSTANCE_TYPE" = "$2" ]]; then

                echo -e "$BLUE Instance type is already $CURR_INSTANCE_TYPE, nothing to do!"
                exit 1
            fi

            echo -e " This will change the type of instance $BLUE$INSTANCE_NAME$WHITE"
            echo -e " from $BLUE$CURR_INSTANCE_TYPE$WHITE to $BLUE$2$WHITE"
            echo -e "$WARN $RED WARNING: The instance will be shutdown if it is not already"
            read -p " Are you sure you want to do this? [y/n]" -n 1 -r
            if [[ ! $REPLY =~ ^[Yy]$ ]]
            then
                [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 
            fi

            echo -e "$WHITE"

            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
              "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
              jq -r ".Reservations[] | .Instances[] | .InstanceId")

            echo -e "$ZAP Sending shutdown command to instance $BLUE$INSTANCE_NAME$WHITE"

            aws ec2 stop-instances --instance-ids $INSTANCE_ID
            echo "$WAIT Waiting 20 seconds for instance to shutdown..."
            sleep 20

            echo -e " Setting instance type for $BLUE$INSTANCE_NAME$WHITE to $BLUE$2$WHITE"

            aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID \
                --instance-type $2 || \
                echo -e "$ZAP $RED Instance type change failed.$WHITE" && \
                echo "$WAIT  Waiting another 10 seconds before trying again..." && \
                sleep 10 #&& \
                aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID \
                --instance-type $2

            INSTANCE_TYPE=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
              "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" |\
              jq -r ".Reservations[] | .Instances[] | .InstanceType")

            if [[ "$INSTANCE_TYPE" = "$2" ]]; then

                echo -e "$BOOM $GREEN Instance type change to $BLUE$2$GREEN successful$WHITE"

            else

                echo -e "$ZAP $RED Instance type change failed.$WHITE"
                echo -e "$RED Check the instance name is correct.$WHITE"

            fi

        fi

    #
    # Shutdown the instance
    #

    elif [[ "$1" == 'stop' ]]; then

        echo -e "$ZAP Sending shutdown command to instance $BLUE$INSTANCE_NAME$WHITE"

        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
          "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" | \
          jq -r ".Reservations[] | .Instances[] | .InstanceId")

        aws ec2 stop-instances --instance-ids $INSTANCE_ID

    #
    # List instance types
    #

    elif [[ "$1" == 'instances' ]]; then
        if [[ "$2" ]]; then
            FILTER_INSTANCES="$2"
        else
            FILTER_INSTANCES=c*,p*,r*
        fi
        aws ec2 describe-instance-types \
            --output table \
            --query "InstanceTypes[].{Instance:InstanceType,Memory:MemoryInfo.SizeInMiB,vCPUs:VCpuInfo.DefaultVCpus,GPUs:GpuInfo.Gpus[0].Count}" \
            --filters "Name=instance-type,Values=$FILTER_INSTANCES"

	elif [[ "$1" == 'jobs' ]]; then
		if [[ "$2" == 'stop' ]]; then
			if [[ "$3" ]]; then
				JOB_NAME=$(aws sagemaker list-training-jobs --status-equals "InProgress" --name-contains "$3" --max-items 1 | \
					jq -r '.TrainingJobSummaries[].TrainingJobName')
			else
				JOB_NAME=$(aws sagemaker list-training-jobs --status-equals "InProgress" --max-items 1 | \
					jq -r '.TrainingJobSummaries[].TrainingJobName')
			fi
			aws sagemaker stop-training-job --training-job-name "$JOB_NAME"
		elif [[ "$2" == 'logs' ]]; then
			if [[ "$3" ]]; then
				JOB_PREFIX="$3"
				LOG_STREAM_NAME=$(aws logs describe-log-streams \
					--log-group-name /aws/sagemaker/TrainingJobs \
					--descending --log-stream-name-prefix $JOB_PREFIX | jq --raw-output '.logStreams[0].logStreamName'
				)
			else
				LOG_STREAM_NAME=$(aws logs describe-log-streams \
					--log-group-name /aws/sagemaker/TrainingJobs \
					--descending --order-by LastEventTime | jq --raw-output '.logStreams[0].logStreamName')
			fi
			aws logs get-log-events \
				--log-group-name /aws/sagemaker/TrainingJobs \
				--log-stream-name $LOG_STREAM_NAME | jq '.events[].message'
		else
			aws sagemaker list-training-jobs \
				--output table \
				--query "TrainingJobSummaries[:10].{JobName:TrainingJobName,Status:TrainingJobStatus}"
		fi
	elif [[ "$1" == 'price' ]]; then
        INSTANCE_TYPE=$2
        AMOUNT=$(curl -s \
            --request GET \
            --url https://api.vantage.sh/v1/products/aws-ec2-$INSTANCE_TYPE/prices/aws-ec2-$INSTANCE_TYPE-eu_west_1-on_demand-linux \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer sd4QN9r9YuOEAUqtZ75xz2dvHFQf7i_4EU1Wql3gih0' | jq -r '.amount')
		echo "Instance $INSTANCE_TYPE costs $AMOUNT\$ per hour"
	else
        echo -e "$BLUE $ZAP AWS EC2 instance remote control $ZAP"
        echo ""
        echo " $WARN  You must set the following ENV VARS:"
        echo " INSTANCE_NAME            - The name of the instance (e.g. datascience_base)"
        echo ""
        echo " To make use of remote list you can optionally set:"
        echo " FILTER_PREFIX            - The prefix used to identify instances"
        echo "                            of interest (e.g. datascience)"
        echo ""
        echo " Optionally you can also set the following if you intend to use"
        echo " the remote git command"
        echo " REMOTE_PATH              - Path to remote working repo"
        echo " LOCAL_PATH               - Path to local working repo"
        echo ""
        echo " $WARN  You must also have your AWS credentials set either locally"
        echo " as AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY_ID or as"
        echo " AWS_PROFILE, having first set your credentials with aws, usually"
        echo " in ~/.aws/credentials and ~/.aws/config."
        echo ""
        echo " $WARN  All commands will filter terminated instances by default"
        echo ""
        echo " $STRONG Available commands:"
        echo ""
        echo " start                - Starts the instance"
        echo " git                  - Sets up a remote in your local datalabs repo that "
        echo "                        points to the remote repo on the instance. This "
        echo "                        allows you to push code directly to your instance "
        echo "                        from your local datalabs folder with git push ec2"
        echo " connect              - Tries to connect to the instance"
        echo " id                   - Returns the instance id e.g. i-ae23f836a5f3de"
        echo " ip                   - Returns the instance public address ec2-x-x-x-x...amazonaws.com"
        echo " status               - Returns the status of the instance"
        echo " list | ls            - Lists all the ec2 instances whose name has a prefix"
        echo "                        described by FILTER_PREFIX."
        echo " type                 - Changes the instance type to that specified as an"
        echo "                        argument \(e.g. t2.small\), otherwise returns the"
        echo "                        instance type"
        echo " stop                 - Stops the instance"
        echo " instances            - Lists information about available ec2 instances"
        echo "                        by default filter c*,p*,r* but custom filter can"
        echo "                        be passed as second argument e.g. r4\*"
        echo " jobs                 - Lists sagemaker jobs and their progress"
		echo " jobs stop JOB_NAME   - Stops sagemaker jobs that starts with JOB_NAME"
		echo " jobs logs JOB_PREFIX - Gets logs for sagemaker jobs with prefix JOB_PREFIX"
		echo " price INSTANCE_TYPE  - Get price of instance type e.g. p2_xlarge"
		echo ""
        echo " $STRONG Available options:"
        echo ""
        echo " -v / --verbose  - Commands return verbose output"
        echo ""

    fi
}

remote $1 $2 $3
